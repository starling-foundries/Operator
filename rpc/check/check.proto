syntax = "proto3";

package twirp.check;

// ============================================================================
// Primitives
// ============================================================================
service Check {
    //sends the signed transaction from the client to the operator.
    rpc Send(CheckTransaction) returns (queueID);
    //retrieves the transaction information from the perspective of the operator
    rpc Status(queueID) returns (StatusResp);
    //same as above but client does not need to know their last txID  - useful for finding nonce to pack transaction for signing. Should only be exposed to authenticated clients.
    rpc LastTransaction(Empty) returns(StatusResp);
    
}

message ByteArray
{
    bytes data             = 1;
}
message StatusResp
{
    ByteArray sender_pkey                    = 1;

    //tranid should be the chain-addressable transaction id for use in ex: viewblock.io. it is set to nil if this is unknown.
    bytes tranid                        = 2;
    enum Status {
        UNDEFINED                       = 0;
        RECIEVED                        = 1;
        PROCESSED                       = 2;
        REJECTED                        = 3;     
    }   
    Status status                       = 3;
}
//Empty only requires the calling user's pubkey
message Empty {
    ByteArray pubkey                    = 1;
}

//indexes the sent transaction's status within the context of the operator. 
message queueID
{
    uint32 queueID                    = 1;
}
//this object is injected straight into the code field of the encapsulating transaction
message CheckTransactionCoreInfo
{
    ByteArray senderpubkey = 1;
    bytes toaddr           = 2;
    ByteArray amount       = 3;
    ByteArray fee          = 4;
    bytes operatorAddr     = 5;
    //this nonce is account-specific within the scilla contract. The encapsulating transaction will have a nonce from the operator's wallet. this nonce should always be increasing
    uint64 nonce           = 6;
    ByteArray signature    = 7; //signatures can be validated if required
}

message LastNonceResp
{
    uint64 nonce           = 1;
}
message CheckTransaction
{
    uint32 version                = 1;
    CheckTransactionCoreInfo info = 2;
}

message CheckStatusResp
{
     bytes receipt      = 1;
     ByteArray fee      = 2;
}

//responds with the address of the on-chain contract this server is operating.
message OperatorTargetResp
{
    bytes contractAddr          = 1;
}
